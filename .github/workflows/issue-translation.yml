name: Translate Issue to English

on:
  issues:
    types: [opened, labeled]

permissions:
  contents: read
  issues: write
  models: read

concurrency:
  group: issue-translation-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  translate:
    if: >
      (github.event_name == 'issues') && (
        (github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'translate:en')) ||
        (github.event.action == 'labeled' && github.event.label.name == 'translate:en')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Run AI Inference (translate to English)
        id: inference
        uses: actions/ai-inference@v2
        with:
          model: openai/gpt-4o
          system-prompt: >
            You are a professional translator. Translate Japanese to English.
            Keep Markdown structure, code blocks and links intact.
            Do not add commentary or apologies. Output English only.
          prompt: |
            Translate the following GitHub Issue to English.
            Preserve Markdown structure, code fences, and links.
            Output in Markdown with the following sections:

            ## Title
            - Provide an English title only.

            ## Body
            - Provide the English translation of the body.

            ----
            Original Title:
            "${{ github.event.issue.title }}"

            Original Body:
            """
            ${{ github.event.issue.body }}
            """
          max-tokens: 2000
      - name: Comment translation to the issue
        uses: actions/github-script@v7
        env:
          RESPONSE: ${{ steps.inference.outputs.response }}
          RESPONSE_FILE: ${{ steps.inference.outputs['response-file'] }}
        with:
          script: |
            const fs = require('fs');
            const responseFile = process.env.RESPONSE_FILE;
            let body = process.env.RESPONSE || '';
            if (responseFile && responseFile.length) {
              try { body = fs.readFileSync(responseFile, 'utf8'); } catch (_) {}
            }
            body = (body || '').trim();
            if (!body) {
              body = 'Translation failed or empty.';
            } else {
              body = '### English Translation\n\n' + body;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });


